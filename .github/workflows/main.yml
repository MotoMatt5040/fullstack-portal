name: Build and Deploy to Testing

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: testing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Testing Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TESTING_SSH_HOST }}
          username: ${{ secrets.TESTING_SSH_USERNAME }}
          key: ${{ secrets.TESTING_SSH_PRIVATE_KEY }}
          script: |
            echo "ðŸš€ Starting deployment at $(date)"
            
            # Deploy path
            DEPLOY_PATH="$HOME/fullstack-portal"
            
            # Remove old deployment
            if [ -d "$DEPLOY_PATH" ]; then
              rm -rf $DEPLOY_PATH
            fi
            
            # Clone fresh
            mkdir -p $DEPLOY_PATH
            cd $DEPLOY_PATH
            git clone https://github.com/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}.git .
            
            # Create .env file with TESTING values
            cat > .env << 'EOF'
            # Environment
            NODE_ENV=production
            VITE_ENV=production
            COMPOSE_ENV=production
            
            # Domain Configuration (TESTING URL)
            VITE_DOMAIN_NAME=${{ secrets.VITE_DOMAIN_NAME }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            VITE_DEV_API_URL=${{ secrets.VITE_DEV_API_URL }}
            VITE_DOCKER_API_URL=${{ secrets.VITE_DOCKER_API_URL }}
            
            # All your other secrets
            ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
            REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}
            DATABASE_URI=${{ secrets.DATABASE_URI }}
            
            # Email
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASS=${{ secrets.SMTP_PASS }}
            FROM_NAME=${{ secrets.FROM_NAME }}
            FROM_EMAIL=${{ secrets.FROM_EMAIL }}
            
            # Add all other production secrets here...
            EOF
            
            # Stop existing containers
            docker compose down || true
            
            # Build and start with the main docker-compose.yml
            docker compose up -d --build
            
            # Wait for services
            sleep 30
            
            # Check status
            docker compose ps
            
            # Test endpoints
            echo "Testing API..."
            curl -f "https://${{ secrets.VITE_DOMAIN_NAME }}/api/health" || echo "API not ready"
            
            echo "Testing Frontend..."
            curl -f "https://${{ secrets.VITE_DOMAIN_NAME }}" || echo "Frontend not ready"
            
            echo "âœ… Deployment completed"