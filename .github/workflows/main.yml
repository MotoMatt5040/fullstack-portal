name: Build and Deploy to Testing

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: testing
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Testing Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TESTING_SSH_HOST }}
          username: ${{ secrets.TESTING_SSH_USERNAME }}
          key: ${{ secrets.TESTING_SSH_PRIVATE_KEY }}
          script: |
            echo "🚀 Starting deployment at $(date)"
            
            # Ensure we're in the user's home directory
            cd $HOME
            echo "📁 Current directory: $(pwd)"
            echo "👤 Current user: $(whoami)"
            
            # Deploy path - explicitly in home directory
            DEPLOY_PATH="$HOME/fullstack_portal"
            echo "🎯 Deploy path: $DEPLOY_PATH"
            
            # Stop existing containers first (if they exist)
            if [ -d "$DEPLOY_PATH" ]; then
              echo "🛑 Stopping existing containers..."
              cd $DEPLOY_PATH
              docker compose --env-file .env.testing -f docker-compose.testing.yml down || true
              docker compose down || true
            fi
            
            # Remove old deployment
            echo "🗑️ Removing old deployment..."
            rm -rf $DEPLOY_PATH
            
            # Clone fresh
            echo "📥 Cloning fresh code..."
            mkdir -p $DEPLOY_PATH
            cd $DEPLOY_PATH
            git clone https://github.com/${{ vars.REPO_OWNER }}/${{ vars.REPO_NAME }}.git .
            
            echo "📋 Creating environment file..."
            # Create .env.testing file (not .env)
            cat > .env.testing << 'EOF'
            # Environment
            NODE_ENV=testing
            VITE_ENV=testing

            # Domain Configuration
            VITE_DOMAIN_NAME=${{ secrets.VITE_DOMAIN_NAME }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            VITE_DEV_API_URL=${{ secrets.VITE_DEV_API_URL }}
            VITE_DOCKER_API_URL=${{ secrets.VITE_DOCKER_API_URL }}
            VITE_API_URL=${{ secrets.VITE_API_URL }}

            # JWT Secrets (Generate new ones for testing)
            ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
            REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}

            # MongoDB Database (Testing - could use same cluster with different database name)
            DATABASE_URI=${{ secrets.DATABASE_URI }}

            # GitHub Integration (Same as production)
            FULLSTACK_PORTAL_ISSUES_TOKEN=${{ secrets.FULLSTACK_PORTAL_ISSUES_TOKEN }}
            REPO_OWNER=${{ vars.REPO_OWNER }}
            REPO_NAME=${{ vars.REPO_NAME }}

            # Email Configuration
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            SMTP_USER=${{ secrets.SMTP_USER }}
            SMTP_PASS=${{ secrets.SMTP_PASS }}
            FROM_NAME=${{ vars.FROM_NAME }}
            FROM_EMAIL=${{ vars.FROM_EMAIL }}

            # Promark Database (Same as production for testing)
            PROMARK_DB_USER=${{ secrets.PROMARK_DB_USER }}
            PROMARK_DB_PASSWORD=${{ secrets.PROMARK_DB_PASSWORD }}
            PROMARK_DB_SERVER=${{ secrets.PROMARK_DB_SERVER }}
            PROMARK_DB_NAME=${{ secrets.PROMARK_DB_NAME }}

            # Voxco Database (Same as production for testing)
            VOXCO_DB_USER=${{ secrets.VOXCO_DB_USER }}
            VOXCO_DB_PASSWORD=${{ secrets.VOXCO_DB_PASSWORD }}
            VOXCO_DB_SERVER=${{ secrets.VOXCO_DB_SERVER }}
            VOXCO_DB_NAME=${{ secrets.VOXCO_DB_NAME }}

            # Voxco API (Same as production for testing)
            VOXCO_API_USERNAME=${{ secrets.VOXCO_API_USERNAME }}
            VOXCO_API_PASSWORD=${{ secrets.VOXCO_API_PASSWORD }}
            VOXCO_API_CONTEXT=${{ secrets.VOXCO_API_CONTEXT }}
            VOXCO_WEB_API_ACCESS_KEY=${{ secrets.VOXCO_WEB_API_ACCESS_KEY }}

            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

            # Docker Registry
            DOCKER_REGISTRY=${{ secrets.DOCKER_REGISTRY }}
            IMAGE_TAG=${{ vars.IMAGE_TAG }}
            
            EOF
            
            # Verify we're in the right directory
            echo "📂 Files in deploy directory:"
            ls -la
            
            # Build and start with the testing docker-compose file
            echo "🔨 Building and starting containers..."
            docker compose --env-file .env.testing -f docker-compose.testing.yml up -d --build
            
            # Wait for services
            echo "⏳ Waiting for services to start..."
            sleep 30
            
            # Check status
            echo "📊 Container status:"
            docker compose --env-file .env.testing -f docker-compose.testing.yml ps
            
            # Show container logs for debugging
            echo "📜 Container logs:"
            docker compose --env-file .env.testing -f docker-compose.testing.yml logs --tail=10
            
            # Test endpoints
            echo "🧪 Testing API..."
            curl -f "https://${{ secrets.VITE_DOMAIN_NAME }}/api/health" || echo "API not ready"
            
            echo "🧪 Testing Frontend..."
            curl -f "https://${{ secrets.VITE_DOMAIN_NAME }}" || echo "Frontend not ready"
            
            echo "✅ Deployment completed at $(date)"
            echo "🌐 Site available at: https://${{ secrets.VITE_DOMAIN_NAME }}"